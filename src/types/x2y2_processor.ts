/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BigNumberish } from "ethers";
import { Networkish } from "@ethersproject/providers";
import {
  Context,
  getProvider,
  BaseProcessor,
  ContractWrapper,
} from "@sentio/sdk";
import { PromiseOrValue } from "./common";
import { X2y2, X2y2__factory } from "./index";
import {
  CompoundEvent,
  CompoundEventFilter,
  DepositEvent,
  DepositEventFilter,
  NewRewardsPerBlockEvent,
  NewRewardsPerBlockEventFilter,
  WithdrawEvent,
  WithdrawEventFilter,
} from "./X2y2";
class X2y2ContractWrapper extends ContractWrapper<X2y2> {
  constructor(contract: X2y2) {
    super(contract);
  }

  NUMBER_PERIODS() {
    return this.contract.NUMBER_PERIODS({ blockTag: this.block.number });
  }

  PRECISION_FACTOR() {
    return this.contract.PRECISION_FACTOR({ blockTag: this.block.number });
  }

  START_BLOCK() {
    return this.contract.START_BLOCK({ blockTag: this.block.number });
  }

  accTokenPerShare() {
    return this.contract.accTokenPerShare({ blockTag: this.block.number });
  }

  calculatePendingRewards(user: PromiseOrValue<string>) {
    return this.contract.calculatePendingRewards(user, {
      blockTag: this.block.number,
    });
  }

  currentPhase() {
    return this.contract.currentPhase({ blockTag: this.block.number });
  }

  endBlock() {
    return this.contract.endBlock({ blockTag: this.block.number });
  }

  lastRewardBlock() {
    return this.contract.lastRewardBlock({ blockTag: this.block.number });
  }

  rewardPerBlockForOthers() {
    return this.contract.rewardPerBlockForOthers({
      blockTag: this.block.number,
    });
  }

  rewardPerBlockForStaking() {
    return this.contract.rewardPerBlockForStaking({
      blockTag: this.block.number,
    });
  }

  stakingPeriod(arg0: PromiseOrValue<BigNumberish>) {
    return this.contract.stakingPeriod(arg0, { blockTag: this.block.number });
  }

  tokenSplitter() {
    return this.contract.tokenSplitter({ blockTag: this.block.number });
  }

  totalAmountStaked() {
    return this.contract.totalAmountStaked({ blockTag: this.block.number });
  }

  userInfo(arg0: PromiseOrValue<string>) {
    return this.contract.userInfo(arg0, { blockTag: this.block.number });
  }

  x2y2Token() {
    return this.contract.x2y2Token({ blockTag: this.block.number });
  }
}

export type X2y2Context = Context<X2y2, X2y2ContractWrapper>;

export class X2y2Processor extends BaseProcessor<X2y2, X2y2ContractWrapper> {
  bindInternal(address: string, network: Networkish = 1) {
    const contract = X2y2__factory.connect(address, getProvider(network));
    return new X2y2ContractWrapper(contract);
  }

  onCompound(
    handler: (event: CompoundEvent, ctx: X2y2Context) => void,
    filter?: CompoundEventFilter | CompoundEventFilter[]
  ): X2y2Processor {
    if (!filter) {
      filter = this.contract.filters.Compound(null, null);
    }
    super.onEvent(handler, filter);
    return this;
  }

  onDeposit(
    handler: (event: DepositEvent, ctx: X2y2Context) => void,
    filter?: DepositEventFilter | DepositEventFilter[]
  ): X2y2Processor {
    if (!filter) {
      filter = this.contract.filters.Deposit(null, null, null);
    }
    super.onEvent(handler, filter);
    return this;
  }

  onNewRewardsPerBlock(
    handler: (event: NewRewardsPerBlockEvent, ctx: X2y2Context) => void,
    filter?: NewRewardsPerBlockEventFilter | NewRewardsPerBlockEventFilter[]
  ): X2y2Processor {
    if (!filter) {
      filter = this.contract.filters.NewRewardsPerBlock(null, null, null, null);
    }
    super.onEvent(handler, filter);
    return this;
  }

  onWithdraw(
    handler: (event: WithdrawEvent, ctx: X2y2Context) => void,
    filter?: WithdrawEventFilter | WithdrawEventFilter[]
  ): X2y2Processor {
    if (!filter) {
      filter = this.contract.filters.Withdraw(null, null, null);
    }
    super.onEvent(handler, filter);
    return this;
  }

  private static templateContract = X2y2__factory.connect("", getProvider(1));

  static filters = X2y2Processor.templateContract.filters;

  static bind(
    address: string,
    network: Networkish = 1,
    name = "X2y2"
  ): X2y2Processor {
    return new X2y2Processor(address, name, network);
  }
}
